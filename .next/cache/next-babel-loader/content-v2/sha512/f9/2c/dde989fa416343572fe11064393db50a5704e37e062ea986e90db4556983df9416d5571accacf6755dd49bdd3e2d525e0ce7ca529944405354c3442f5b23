{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\chich\\\\OneDrive\\\\Desktop\\\\React-Practice\\\\Next.Js Advanced Project\\\\pages\\\\[meetupId]\\\\index.js\";\n// our-domain.com/[meetupId]\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails() {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n} // getStaticPaths is also used in a page component file like getStaticProps and getServerSideProps. it is used in dynamic files with getStaticProps(not getServerSideProps). here, we define all the specific meetupIds for which this page should be pre-generated. the fallback key tells Next.js whether your paths array contains all supported parameter values or just some and setting it to false means that your path contains all, setting it to true will allow next.js to dynamically pregenerate some parameter values as requests are coming in. fallback allows you to pregenerate some of your pages for some specific meetupIds(e.g pages visited frequently)\n\n\nexport async function getStaticPaths() {\n  return {\n    fallback: false,\n    paths: [{\n      params: {\n        meetupId: \"m1\"\n      }\n    }, {\n      params: {\n        meetupId: \"m2\"\n      }\n    }]\n  };\n} // using context in getStaticProps will not give us the response/request object but a params object where our identifiers between the square bracket will be the properties and the values will be the actual values encoded in the URL\n\nexport function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  return {\n    props: {\n      meetupData: {}\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/chich/OneDrive/Desktop/React-Practice/Next.Js Advanced Project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MeetupDetails","getStaticPaths","fallback","paths","params","meetupId","getStaticProps","context","props","meetupData"],"mappings":";;AAAA;AACA,OAAOA,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,GAAyB;AACvB,sBAAO,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ;AADV,KADK,EAML;AACED,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ;AADV,KANK;AAFF,GAAP;AAeD,C,CAED;;AACA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AACtC,QAAMF,QAAQ,GAAGE,OAAO,CAACH,MAAR,CAAeC,QAAhC;AAEA,SAAO;AACLG,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AADP;AADF,GAAP;AAKD;AAED,eAAeT,aAAf","sourcesContent":["// our-domain.com/[meetupId]\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nfunction MeetupDetails() {\r\n  return <MeetupDetail />;\r\n}\r\n\r\n// getStaticPaths is also used in a page component file like getStaticProps and getServerSideProps. it is used in dynamic files with getStaticProps(not getServerSideProps). here, we define all the specific meetupIds for which this page should be pre-generated. the fallback key tells Next.js whether your paths array contains all supported parameter values or just some and setting it to false means that your path contains all, setting it to true will allow next.js to dynamically pregenerate some parameter values as requests are coming in. fallback allows you to pregenerate some of your pages for some specific meetupIds(e.g pages visited frequently)\r\nexport async function getStaticPaths() {\r\n  return {\r\n    fallback: false,\r\n    paths: [\r\n      {\r\n        params: {\r\n          meetupId: \"m1\",\r\n        },\r\n      },\r\n      {\r\n        params: {\r\n          meetupId: \"m2\",\r\n        },\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\n// using context in getStaticProps will not give us the response/request object but a params object where our identifiers between the square bracket will be the properties and the values will be the actual values encoded in the URL\r\nexport function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {},\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}