{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\chich\\\\OneDrive\\\\Desktop\\\\React-Practice\\\\Next.Js Advanced Project\\\\pages\\\\index.js\";\n// our-domain.com/\nimport MeetupList from \"../components/meetups/MeetupList\";\n\n// Next.js takes the first render cycle and returns it as the pre-rendered HTML code.\n// Two forms of pre-rendering are Static Generation(what we should use) and Server side rendering. Using static generation, the page is pre-rendered when you build it for production\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n} //static generation example. it has to be written inside of the pages folder and the name must be getStaticProps. Next.js will first call this before the component function. it can be async as Next.js will wait for this promise to be resolved so that the page can be pre-rendered with the required data. it doesn't execute on the client or server side but during the build process. the props object it returns is the props passed to the component function or to be set in the component function. revalidate takes a number which is the number of seconds Next.js will wait before it will regenerate the page for an incoming request\n// export function getStaticProps() {\n//   // fetch data from an API\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS,\n//     },\n//     revalidate: 10,\n//   };\n// }\n// Server side rendering example. this will not run during the build process but always on the server after deployment. it runs for every incoming request\n\n\n_c = HomePage;\nexport var __N_SSP = true;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/chich/OneDrive/Desktop/React-Practice/Next.Js Advanced Project/pages/index.js"],"names":["MeetupList","HomePage","props","meetups"],"mappings":";;AAAA;AACA,OAAOA,UAAP,MAAuB,kCAAvB;;AAqBA;AACA;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;KAhBSF,Q;;AA6BT,eAAeA,QAAf","sourcesContent":["// our-domain.com/\r\nimport MeetupList from \"../components/meetups/MeetupList\";\r\n\r\nconst DUMMY_MEETUPS = [\r\n  {\r\n    id: \"m1\",\r\n    title: \"My First Meetup\",\r\n    image:\r\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Ginza_area_at_dusk_from_Tokyo_Tower.jpg/330px-Ginza_area_at_dusk_from_Tokyo_Tower.jpg\",\r\n    address: \"Some address 5, 12345, Some city\",\r\n    description: \"This is a first meetup\",\r\n  },\r\n  {\r\n    id: \"m2\",\r\n    title: \"My Second Meetup\",\r\n    image:\r\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Ginza_area_at_dusk_from_Tokyo_Tower.jpg/330px-Ginza_area_at_dusk_from_Tokyo_Tower.jpg\",\r\n    address: \"Some address 10, 12345, Some city\",\r\n    description: \"This is a second meetup\",\r\n  },\r\n];\r\n\r\n// Next.js takes the first render cycle and returns it as the pre-rendered HTML code.\r\n// Two forms of pre-rendering are Static Generation(what we should use) and Server side rendering. Using static generation, the page is pre-rendered when you build it for production\r\n\r\nfunction HomePage(props) {\r\n  return <MeetupList meetups={props.meetups} />;\r\n}\r\n\r\n//static generation example. it has to be written inside of the pages folder and the name must be getStaticProps. Next.js will first call this before the component function. it can be async as Next.js will wait for this promise to be resolved so that the page can be pre-rendered with the required data. it doesn't execute on the client or server side but during the build process. the props object it returns is the props passed to the component function or to be set in the component function. revalidate takes a number which is the number of seconds Next.js will wait before it will regenerate the page for an incoming request\r\n// export function getStaticProps() {\r\n//   // fetch data from an API\r\n\r\n//   return {\r\n//     props: {\r\n//       meetups: DUMMY_MEETUPS,\r\n//     },\r\n//     revalidate: 10,\r\n//   };\r\n// }\r\n\r\n// Server side rendering example. this will not run during the build process but always on the server after deployment. it runs for every incoming request\r\nexport async function getServerSideProps(context) {\r\n  const req = context.req; //gives access to the full incoming request\r\n  const res = context.res; //gives access to the response sent back\r\n\r\n  // fetch data from an API\r\n  return {\r\n    props: {\r\n      meetups: DUMMY_MEETUPS,\r\n    },\r\n  };\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}